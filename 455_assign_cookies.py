# Constraints:
    # 1 <= g.length <= 3 * 104
    # 0 <= s.length <= 3 * 104
    # 1 <= g[i], s[j] <= 231 - 1

# Don't think I've encountered a question like this before?
# s and g lengths are huge, will need to make sure the solution isn't too slow
# Initial thought is to
    # Hashmap the children to
    # childrenHash[hungerSize] = numberOfChildren
    # Loop through s and +1 for each matched value?
        # How to account for overfeeding

# Might be possible to sort and then reverse both arrays?
# Deal with the larger cookie and appetite sizes first then deal with smaller after


# Might be a two pointer situation?



class Solution:
    def findContentChildren(self, g: list[int], s: list[int]) -> int:
        if len(s) == 0:
            return 0

        g.sort()
        g.reverse()
        s.sort()
        s.reverse()

        sPointer = 0
        gPointer = 0

        while gPointer < len(g) and sPointer < len(s):
            if g[gPointer] <= s[sPointer]:
                contentChildren += 1
                sPointer += 1
            gPointer += 1

        print(contentChildren)
        return sPointer



# g = [1,2,3]
# s = [1,1]
# >>> 1

# g = [1,2]
# s = [1,2,3]
# >>> 2

g = [262,437,433,102,438,346,131,160,281,34,219,373,466,275,51,118,209,32,108,57,385,514,439,73,271,442,366,515,284,425,491,466,322,34,484,231,450,355,106,279,496,312,96,461,446,422,143,98,444,461,142,234,416,45,271,344,446,364,216,16,431,370,120,463,377,106,113,406,406,481,304,41,2,174,81,220,158,104,119,95,479,323,145,205,218,482,345,324,253,368,214,379,343,375,134,145,268,56,206]
# [2,16,32,34,34,41,45,51,56,57,73,81,95,96,98,102,104,106,106,108,113,118,119,120,131,134,142,143,145,145,158,160,174,205,206,209,214,216,218,219,220,231,234,253,262,268,271,271,275,279,281,284,304,312,322,323,324,343,344,345,346,355,364,366,368,370,373,375,377,379,385,406,406,416,422,425,431,433,437,438,439,442,444,446,446,450,461,461,463,466,466,479,481,482,484,491,496,514,515]
s = [149,79,388,251,417,82,233,377,95,309,418,400,501,349,348,400,461,495,104,330,155,483,334,436,512,232,511,40,343,334,307,56,164,276,399,337,59,440,3,458,417,291,354,419,516,4,370,106,469,254,274,163,345,513,130,292,330,198,142,95,18,295,126,131,339,171,347,199,244,428,383,43,315,353,91,289,466,178,425,112,420,85,159,360,241,300,295,285,310,76,69,297,155,416,333,416,226,262,63,445,77,151,368,406,171,13,198,30,446,142,329,245,505,238,352,113,485,296,337,507,91,437,366,511,414,46,78,399,283,106,202,494,380,479,522,479,438,21,130,293,422,440,71,321,446,358,39,447,427,6,33,429,324,76,396,444,519,159,45,403,243,251,373,251,23,140,7,356,194,499,276,251,311,10,147,30,276,430,151,519,36,354,162,451,524,312,447,77,170,428,23,283,249,466,39,58,424,68,481,2,173,179,382,334,430,84,151,293,95,522,358,505,63,524,143,119,325,401,6,361,284,418,169,256,221,330,23,72,185,376,515,84,319,27,66,497]
# [2,3,4,6,6,7,10,13,18,21,23,23,23,27,30,30,33,36,39,39,40,43,45,46,56,58,59,63,63,66,68,69,71,72,76,76,77,77,78,79,82,84,84,85,91,91,95,95,95,104,106,106,112,113,119,126,130,130,131,140,142,142,143,147,149,151,151,151,155,155,159,159,162,163,164,169,170,171,171,173,178,179,185,194,198,198,199,202,221,226,232,233,238,241,243,244,245,249,251,251,251,251,254,256,262,274,276,276,276,283,283,284,285,289,291,292,293,293,295,295,296,297,300,307,309,310,311,312,315,319,321,324,325,329,330,330,330,333,334,334,334,337,337,339,343,345,347,348,349,352,353,354,354,356,358,358,360,361,366,368,370,373,376,377,380,382,383,388,396,399,399,400,400,401,403,406,414,416,416,417,417,418,418,419,420,422,424,425,427,428,428,429,430,430,436,437,438,440,440,444,445,446,446,447,447,451,458,461,466,466,469,479,479,481,483,485,494,495,497,499,501,505,505,507,511,511,512,513,515,516,519,519,522,522,524,524]
# >>> 99

sol = Solution()
sol.findContentChildren(g,s)
